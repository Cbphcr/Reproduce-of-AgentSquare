{
    "thought": "Given the performance metrics of the discovered planning modules, it's clear that none of them achieve a high completion rate, with the highest being 0.41. This suggests that there's room for improvement, especially in how tasks are decomposed and how reasoning and tool use instructions are provided. A novel approach could involve integrating a more dynamic prompting technique that adapts based on the task's complexity and the environment's feedback. This would involve not just decomposing the task into sub-tasks but also dynamically adjusting the plan based on the agent's progress and any obstacles encountered. The idea is to create a more flexible and adaptive planning module that can better handle the unpredictability of ALFworld tasks.",
    "name": "adaptive_planner",
    "code": "class PlanningAdaptive(PlanningBase):\n    def create_prompt(self, task_type, task_description, feedback, few_shot):\n        if feedback == '':\n            prompt = '''You are an advanced planner specialized in {task_type} tasks within dynamic environments. Your role is to decompose the given task into adaptable sub-tasks, providing clear reasoning and tool use instructions for each. Consider the environment's feedback and adjust the plan dynamically. Ensure the sub-tasks are actionable, ordered logically, and flexible to changes. Below is an example for reference:\nTask: {example}\n\nNow, please plan for the following task, keeping adaptability in mind:\nTask: {task_description}\n'''\n        else:\n            prompt = '''You are an advanced planner specialized in {task_type} tasks within dynamic environments. Your role is to decompose the given task into adaptable sub-tasks, providing clear reasoning and tool use instructions for each. Consider the environment's feedback and adjust the plan dynamically. Below is the feedback from previous attempts:\nReflexion: {feedback}\n\nGiven this feedback, please replan for the following task, ensuring the sub-tasks are adaptable to such challenges:\nTask: {task_description}\n'''\n        return prompt.format(example=few_shot, task_description=task_description, task_type=task_type, feedback=feedback)\n",
    "performance": 0.0
}