{
    "thought": "After analyzing the discovered memory modules, it's clear that the effectiveness of a memory module in ALFworld tasks hinges on how well it can leverage past successful trajectories to guide current task execution. The 'generative' module stands out by not just retrieving similar tasks but also evaluating their relevance, which slightly improves performance. However, none of the modules explicitly consider the sequential nature of actions within trajectories, which is crucial in ALFworld's sequential decision-making tasks. My proposed module, 'SequentialGuide', will focus on extracting and utilizing the sequence of actions from past successful trajectories to generate a step-by-step guide for the current task. This approach aims to mimic human-like planning by breaking down the task into actionable steps based on past experiences, potentially offering a more structured and effective guidance.",
    "name": "SequentialGuide",
    "code": "class MemorySequentialGuide(MemoryBase):\n    def __init__(self, llms_type) -> None:\n        super().__init__(llms_type, 'sequential_guide')\n\n    def retriveMemory(self, query_scenario):\n        # Extract task name from query scenario\n        task_name = re.findall(r'Your task is to:\\s*(.*?)\\s*>', query_scenario)[2]\n        \n        # Return empty string if memory is empty\n        if self.scenario_memory._collection.count() == 0:\n            return ''\n            \n        # Find most similar memory\n        similarity_results = self.scenario_memory.similarity_search_with_score(\n            task_name, k=1)\n            \n        # Extract task trajectory from results\n        if not similarity_results:\n            return ''\n        \n        trajectory = similarity_results[0][0].metadata['task_trajectory']\n        \n        # Generate a step-by-step guide based on the trajectory\n        prompt = f'''Given the following successful task trajectory, extract a concise, step-by-step guide that could be used to solve a similar task. Focus on the sequence of actions and their outcomes.\n\nSuccessful Task Trajectory:\n{trajectory}\n\nStep-by-Step Guide:\n1.'''\n        \n        guide = llm_response(prompt=prompt, model=self.llm_type, temperature=0.1)\n        \n        return f'Step-by-step guide from a similar task:\\n1.{guide}'\n\n    def addMemory(self, current_situation):\n        # Extract task description\n        task_name = re.search(r'Your task is to:\\s*(.*?)\\s*>', current_situation).group(1)\n        \n        # Create document with metadata\n        memory_doc = Document(\n            page_content=task_name,\n            metadata={\n                \"task_name\": task_name,\n                \"task_trajectory\": current_situation\n            }\n        )\n        \n        # Add to memory store\n        self.scenario_memory.add_documents([memory_doc])",
    "performance": 0.9
}